apply plugin: 'com.android.application'
apply plugin: 'com.squareup.anvil'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: rootProject.file("properties.gradle")
apply plugin: 'common-android'

android {
    defaultConfig {
        applicationId "com.memfault.usagereporter"
        manifestPlaceholders = [
                // For development purposes (allows UsageReporter to be updated using `adb install`):
                bortUsageReporterPersistent: bortProperty("BORT_USAGE_REPORTER_PERSISTENT") ?: "true",
        ]

        versionCode loadVersionCode() as Integer
        versionName loadVersionName() as String

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

  namespace 'com.memfault.usagereporter'
}

kapt {
    correctErrorTypes true
    arguments {
        // This is necessary because of the way we bind Anvil's component to Hilt's.
        arg("dagger.hilt.disableModulesHaveInstallInCheck", "true")
    }
}

dependencies {
    api project(':bort-shared')
    api project(':reporting-lib')

    implementation deps.android.hilt.work
    implementation deps.android.preference
    implementation deps.android.work
    implementation deps.dagger.hilt
    implementation deps.result

    kapt deps.android.hilt.compiler
    kapt deps.dagger.hilt.compiler
    // An explicit reference to this transitive dependency fixes a duplicate class error during build.
    implementation deps.android.viewmodel
}

afterEvaluate {
    tasks.named("assembleRelease").configure {
        doLast {
            copy {
                from file("$buildDir/outputs/apk/release/reporter-release-unsigned.apk")
                into rootDir
                rename 'reporter-release-unsigned.apk', 'MemfaultUsageReporter.apk'
            }
        }
    }
}
