import java.nio.file.Paths
import static com.memfault.bort.buildsrc.BortConfigDownloaderKt.bortSystemPropertyConfig

ext.bortProperty = { propName ->
    if (rootProject.hasProperty(propName)) {
        return rootProject.property(propName)
    }
    def bortPropertiesFile = rootProject.file("bort.properties")
    def bortProperties = new Properties()
    bortProperties.load(new FileInputStream(bortPropertiesFile))
    return bortProperties[propName]
}

ext.bortSystemPropertyConfigProperty = { propName ->
    if (rootProject.hasProperty(propName)) {
        return rootProject.property(propName)
    }
    def properties = bortSystemPropertyConfig(rootProject.rootDir.absolutePath)
    return properties[propName]
}

ext.loadKeystoreProperties = {
    ext.keystorePropertiesFile = rootProject.file(bortProperty("BORT_KEYSTORE_PROPERTIES_PATH"))

    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    ext.keystoreProperties = keystoreProperties
    return keystoreProperties
}

ext.getKeystoreFilePath = {
    def relativePath = ext.keystoreProperties['storeFile']
    if (relativePath == null) {
        throw new IllegalArgumentException("Keystore storeFile property must be set")
    }
    def keystoreFilePath = Paths.get(ext.keystorePropertiesFile.getParent(), relativePath)
    if (keystoreFilePath.toFile().exists()) {
        return keystoreFilePath
    }
    // Notify of API behaviour change
    logger.warn("WARNING: Keystore storeFile property is set, but does not exist relative to the keystore.properties file.")
    logger.warn("Please update the storeFile property to be relative to keystore.properties")
    logger.warn("Assuming it is relative to the current module.")
    return relativePath
}

ext.currentGitSha = {
    def stdout = new ByteArrayOutputStream()
    try {
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception ignored) {
        return "UNKNOWN"
    }
}

ext.upstreamGitSha = {
    if (rootProject.hasProperty("UPSTREAM_GIT_SHA")) {
        return rootProject.property("UPSTREAM_GIT_SHA")
    }
    return "DEV"
}


ext.upstreamVersionName = {
    return "${UPSTREAM_MAJOR_VERSION}.${UPSTREAM_MINOR_VERSION}.${UPSTREAM_PATCH_VERSION}+${bortProperty("BUILD_ID_CODE")}"
}

ext.upstreamVersionCode = {
    // Provide 99 choices for major/minor/patch semver components, plus 99 for customer-defined
    // build ID.
    return (Integer.parseInt(bortProperty("BUILD_ID_CODE")) + 100 * (Integer.parseInt(UPSTREAM_PATCH_VERSION) + 100 * (Integer.parseInt(UPSTREAM_MINOR_VERSION) + 100 * Integer.parseInt(UPSTREAM_MAJOR_VERSION)))) as Integer
}

ext.loadVersionName = {
    if (bortProperty("VERSION_NAME_OVERRIDE")) {
        return "${bortProperty("VERSION_NAME_OVERRIDE")}"
    }
    return "${ext.upstreamVersionName()}-${upstreamGitSha()}-${currentGitSha()}"
}

ext.loadVersionCode = {
    return bortProperty("VERSION_CODE_OVERRIDE") ?: ext.upstreamVersionCode()
}

ext.getBortFeatureName = {
    return bortProperty("BORT_FEATURE_NAME") ?: bortProperty("BORT_APPLICATION_ID")
}

ext.verifyBortProperties = {
    def verifyBortProperty = { getter, key, pattern, checkNotNull=true, checkNotZeroLength=false ->
        def value = getter(key)
        if (checkNotNull && value == null) {
            throw new GradleException("${key} property missing! Please configure it in bort.properties")
        }
        if (checkNotZeroLength && value.length() == 0) {
            throw new GradleException("${key} property empty! Please configure it in bort.properties")
        }
        if (!(value ==~ pattern)) {
            throw new GradleException("${key} property '${value}' does not match ${pattern}! Please configure it in bort.properties")
        }
    }
    verifyBortProperty(bortProperty, "MEMFAULT_PROJECT_API_KEY", /^[A-Fa-f0-9]{32}$/, true, true)
    verifyBortProperty(bortSystemPropertyConfigProperty, "ANDROID_BUILD_VERSION_SOURCE", /^(build_fingerprint_and_system_property|build_fingerprint_only|system_property_only)$/)
    // https://cs.android.com/android/platform/superproject/+/master:system/core/toolbox/setprop.cpp;l=55;drc=65a1ee83a89a7bea595ff07a64c50d1e51b2d8e2
    if (bortSystemPropertyConfigProperty("ANDROID_BUILD_VERSION_SOURCE") != "build_fingerprint_only") {
        verifyBortProperty(bortSystemPropertyConfigProperty, "ANDROID_BUILD_VERSION_KEY", /^[A-Za-z0-9:@_.-]+$/)
    }
    verifyBortProperty(bortSystemPropertyConfigProperty, "ANDROID_HARDWARE_VERSION_KEY", /^[A-Za-z0-9:@_.-]+$/)
    verifyBortProperty(bortSystemPropertyConfigProperty, "ANDROID_DEVICE_SERIAL_KEY", /^[A-Za-z0-9:@_.-]+$/)
}

ext.warnLegacyBortProperties = {
    def keys = [
            "ANDROID_BUILD_VERSION_SOURCE",
            "ANDROID_BUILD_VERSION_KEY",
            "ANDROID_HARDWARE_VERSION_KEY",
            "ANDROID_DEVICE_SERIAL_KEY",
    ]
    def foundKeys = keys.findResults { key ->
        if (bortProperty(key)) key
        else null
    }
    if (!foundKeys.empty) {
        project.logger.error([
                "> Found legacy keys in bort.properties. These are now automatically downloaded from Memfault's services.",
                "> Please remove them to avoid confusion:",
                "> ${foundKeys.join(", ")}"
        ].join(System.lineSeparator()))
    }
}
