#!/usr/bin/env python3
# -*- coding: utf-8 -*
import argparse
import configparser
import io
import re
import sys

try:
    import pytest
except:  # noqa
    pass


INVALID_VALUES = {"vnd.myandroid.bortappid", "vnd.myandroid.bortfeaturename"}


MAPPING = {
    # source file placeholder / preprocessor define name => bort.properties variable (and optional fallback)
    # Note: the leading $ is removed for preprocessor define names.
    "$BORT_APPLICATION_ID": ("BORT_APPLICATION_ID",),
    "$BORT_FEATURE_NAME": ("BORT_FEATURE_NAME", "BORT_APPLICATION_ID"),
}


class JavaProperties:
    # The .properties file format is described here:
    # https://docs.oracle.com/javase/7/docs/api/java/util/Properties.html#load(java.io.Reader)
    # Use python's ConfigParser to parse it, it will get us most of the way there.

    def __init__(self, file):
        def _reader():
            yield "[main]"
            # yield from is only supported since python 3.3
            for line in file:
                yield line

        self.cp = configparser.ConfigParser(comment_prefixes=("#", "!"))
        self.cp.read_file(_reader())

    def get(self, key, **kwargs):
        return self.cp.get("main", key.lower(), **kwargs)

    @staticmethod
    def from_string(src):
        return JavaProperties(io.StringIO(src))


class Replacement:
    def __init__(self, prop_name, value):
        self.prop_name = prop_name
        self.value = value

    def __eq__(self, other):
        return (
            self.__class__ == other.__class__
            and self.prop_name == other.prop_name
            and self.value == other.value
        )


def _replace_placeholders(content, replacements):
    for placeholder, replacement in replacements.items():
        content = content.replace(placeholder, replacement.value)

    return content


def _write_if_changed(content, output_file_abspath):
    try:
        with open(output_file_abspath) as file:
            existing_content = file.read()
    except OSError:
        existing_content = None

    if content == existing_content:
        return  # Don't touch it to avoid rebuilds

    with open(output_file_abspath, "w") as file:
        file.write(content)


def _get_replacements(mapping, bort_props):
    def _find_first_replacement(prop_names):
        for prop in prop_names:
            value = bort_props.get(prop, fallback=None)
            if value:
                return Replacement(prop, value)
        return None

    replacements = {
        placeholder: _find_first_replacement(prop_names)
        for placeholder, prop_names in mapping.items()
    }

    for placeholder, replacement in replacements.items():
        if not replacement:
            variables = " or ".join(mapping[placeholder])
            raise Exception(
                "Missing value for {}. Please define {} in bort.properties!".format(
                    placeholder, variables
                )
            )
        if replacement.value in INVALID_VALUES:
            raise Exception(
                "Invalid value '{}' for '{}'. Please change in bort.properties!".format(
                    replacement.value, replacement.prop_name
                )
            )
    return replacements


def _generate_cpp_header(replacements):
    content = """// DO NOT EDIT -- GENERATED BY bort_src_gen.py
"""
    for placeholder in sorted(replacements.keys()):
        define_name = re.sub(r"^\$+", "", placeholder)
        define_value = replacements[placeholder].value
        content += f"#define {define_name} {define_value}\n"
    return content


def _cmd_template(*, input_file, output_file, bort_properties_file):
    with open(bort_properties_file) as f:
        replacements = _get_replacements(MAPPING, JavaProperties(f))
    with open(input_file) as file:
        content = _replace_placeholders(file.read(), replacements)
    _write_if_changed(content, output_file)


def _cmd_cpp_header(*, output_file, bort_properties_file):
    with open(bort_properties_file) as f:
        content = _generate_cpp_header(_get_replacements(MAPPING, JavaProperties(f)))
    _write_if_changed(content, output_file)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    template_parser = subparsers.add_parser("template")
    template_parser.add_argument("input_file")
    template_parser.add_argument("output_file")
    template_parser.add_argument("bort_properties_file")
    template_parser.set_defaults(command=_cmd_template)

    cpp_header_parser = subparsers.add_parser("cpp-header")
    cpp_header_parser.add_argument("output_file")
    cpp_header_parser.add_argument("bort_properties_file")
    cpp_header_parser.set_defaults(command=_cmd_cpp_header)

    args = vars(parser.parse_args())
    command = args.pop("command", None)

    if not command:
        parser.print_help()
        sys.exit(1)

    command(**args)


def test_replace_placeholders():
    assert (
        _replace_placeholders(
            '<permission name="$PERM"/>', {"$PERM": Replacement("BORT_PERM", "com.myperm")}
        )
        == '<permission name="com.myperm"/>'
    )


def test_generate_cpp_header():
    assert (
        _generate_cpp_header(
            {
                "$PERM": Replacement("BORT_PERM", "com.myperm"),
                "$APP_ID": Replacement("BORT_ID", "com.app"),
            }
        )
        == """// DO NOT EDIT -- GENERATED BY bort_src_gen.py
#define APP_ID com.app
#define PERM com.myperm
"""
    )


def test_get_replacements():
    assert _get_replacements(
        {"REPL": ("VAR1", "VAR2"),}, JavaProperties.from_string("VAR2=FOO")
    ) == {"REPL": Replacement("VAR2", "FOO")}

    with pytest.raises(
        Exception, match="Missing value for REPL. Please define VAR1 or VAR2 in bort.properties!",
    ):
        assert _get_replacements(
            {"REPL": ("VAR1", "VAR2"),}, JavaProperties.from_string("VAR3=FOO")
        )

    with pytest.raises(
        Exception,
        match="Invalid value 'vnd.myandroid.bortappid' for 'VAR1'. Please change in bort.properties!",
    ):
        assert _get_replacements(
            {"REPL": ("VAR1", "VAR2"),}, JavaProperties.from_string("VAR1=vnd.myandroid.bortappid")
        )


def test_java_properties():
    props = JavaProperties.from_string(
        """
#  comment
  # comment
! comment
FOO=BAR
BAZ=DUN\
NO
"""
    )
    assert props.get("FOO") == "BAR"
    assert props.get("BAZ") == "DUNNO"
