package com.memfault.bort.metrics

import com.memfault.bort.parsers.BatteryStatsHistoryCustomMetricLogger.Companion.AUDIO
import kotlinx.serialization.json.JsonPrimitive
import kotlinx.serialization.json.doubleOrNull

/**
 * Handles renaming, filtering and post-processing metrics which are now generated by the Custom Metrics service, but
 * used to be created elsewhere (so that their naming/construction remains unchanged).
 */
object AggregateMetricFilter {
    /**
     * We need to:
     *  - Rename some batterystats metrics, so that they are named the same as backend-generated metrics.
     *  - Filter out some batterystats metrics, which aren't used (e.g. time in OFF state).
     *  - Post-process some metrics.
     */
    fun filterAndRenameMetrics(metrics: Map<String, JsonPrimitive>, internal: Boolean): Map<String, JsonPrimitive> {
        return metrics.mapNotNull { metric ->
            handleMetric(metric, internal)
        }.toMap()
    }

    private fun handleMetric(
        metric: Map.Entry<String, JsonPrimitive>,
        internal: Boolean,
    ): Pair<String, JsonPrimitive>? {
        if (!internal) {
            // More complex mappings for batterystats, where we need to filter out and transform values, in addition to
            // renaming.
            BATTERY_MAPPING.forEach { (mapKey, mapConfig) ->
                if (metric.key.startsWith(mapKey)) {
                    mapConfig.forEach { config ->
                        if (config.inputName == metric.key) {
                            return config.outputName to config.mapper(metric.value)
                        }
                    }
                    // If it matches prefix, but is not listed as an input - then nuke it.
                    return null
                }
            }

            // Special case: app versions. Drop .latest.
            if (metric.key.startsWith("version.")) {
                return metric.key.removeSuffix(".latest") to metric.value
            }
        }

        // Special case: sysprops (internal and external). Drop .latest.
        if (metric.key.startsWith("sysprop.")) {
            return metric.key.removeSuffix(".latest") to metric.value
        }

        // Internal metrics: drop the sum/latest suffixes.
        if (internal) {
            if (metric.key.endsWith(".sum")) return metric.key.removeSuffix(".sum") to metric.value
            if (metric.key.endsWith(".latest")) return metric.key.removeSuffix(".latest") to metric.value
        }

        // Untouched
        return metric.toPair()
    }

    private data class MapConfig(
        val inputName: String,
        val outputName: String,
        val mapper: (JsonPrimitive) -> JsonPrimitive = { it },
    )

    /**
     * Maps metrics from metric service to what should be uploaded.
     * - key: prefix (i.e. what was recorded as the metric name)
     * - value: list of mappings associated with this prefix
     *
     * For a given prefix, metrics which match a mapping will be processed and included. Metrics which don't match will
     * be excluded.
     */
    private val BATTERY_MAPPING: Map<String, List<MapConfig>> = mapOf(
        AUDIO to listOf(
            MapConfig("audio_on.secs/hour", "audio_on_ratio") {
                it.doubleOrNull?.let { dbl ->
                    JsonPrimitive(dbl / 3600)
                } ?: it
            }
        ),
    )
}
