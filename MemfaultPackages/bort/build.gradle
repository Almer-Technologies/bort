apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply from: "../properties.gradle"

def keystoreProperties = loadKeystoreProperties()
def keystoreFilePath = getKeystoreFilePath()

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId bortProperty("BORT_APPLICATION_ID")
        manifestPlaceholders = [
                bortControlPermission: bortProperty("BORT_CONTROL_PERMISSION"),
                bortFeatureName: getBortFeatureName()
        ]
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode loadVersionCode() as Integer
        versionName loadVersionName() as String

        buildConfigField "String", "MEMFAULT_FILES_BASE_URL", "\"$MEMFAULT_FILES_BASE_URL\""
        buildConfigField "String", "MEMFAULT_INGRESS_BASE_URL", "\"$MEMFAULT_INGRESS_BASE_URL\""

        buildConfigField "String", "MEMFAULT_PROJECT_API_KEY", "\"" + bortProperty("MEMFAULT_PROJECT_API_KEY") + "\""
        buildConfigField "Boolean", "UPLOAD_NETWORK_CONSTRAINT_ALLOW_METERED_CONNECTION", bortProperty("UPLOAD_NETWORK_CONSTRAINT_ALLOW_METERED_CONNECTION")
        buildConfigField "int", "MINIMUM_LOG_LEVEL", bortProperty("MINIMUM_LOG_LEVEL")
        buildConfigField "Boolean", "RUNTIME_ENABLE_REQUIRED", bortProperty("RUNTIME_ENABLE_REQUIRED")
        buildConfigField "Boolean", "UPLOAD_COMPRESSION_ENABLED", bortProperty("UPLOAD_COMPRESSION_ENABLED")

        buildConfigField "String", "ANDROID_BUILD_VERSION_SOURCE", "\"" + bortSystemPropertyConfigProperty("ANDROID_BUILD_VERSION_SOURCE") + "\""
        buildConfigField "String", "ANDROID_BUILD_VERSION_KEY", "\"" + bortSystemPropertyConfigProperty("ANDROID_BUILD_VERSION_KEY") + "\""
        buildConfigField "String", "ANDROID_HARDWARE_VERSION_KEY", "\"" + bortSystemPropertyConfigProperty("ANDROID_HARDWARE_VERSION_KEY") + "\""
        buildConfigField "String", "ANDROID_DEVICE_SERIAL_KEY", "\"" + bortSystemPropertyConfigProperty("ANDROID_DEVICE_SERIAL_KEY") + "\""

        // Data Sources
        buildConfigField "Boolean", "DATA_SOURCE_BUG_REPORTS_ENABLED", bortProperty("DATA_SOURCE_BUG_REPORTS_ENABLED")
        buildConfigField "Boolean", "DATA_SOURCE_DROP_BOX_ENABLED", bortProperty("DATA_SOURCE_CALIPER_DROP_BOX_TRACES_ENABLED")
        buildConfigField "Boolean", "DATA_SOURCE_METRICS_ENABLED", bortProperty("DATA_SOURCE_CALIPER_METRICS_ENABLED")
        buildConfigField "Boolean", "DATA_SOURCE_BATTERY_STATS_ENABLED", bortProperty("DATA_SOURCE_CALIPER_BATTERYSTATS_ENABLED")

        // Bug Report Settings
        buildConfigField "int", "BUG_REPORT_REQUEST_INTERVAL_HOURS", bortProperty("BUG_REPORT_REQUEST_INTERVAL_HOURS")
        buildConfigField "int", "FIRST_BUG_REPORT_DELAY_AFTER_BOOT_MINUTES", bortProperty("FIRST_BUG_REPORT_DELAY_AFTER_BOOT_MINUTES")
        buildConfigField "int", "BUG_REPORT_MAX_UPLOAD_ATTEMPTS", bortProperty("BUG_REPORT_MAX_UPLOAD_ATTEMPTS")
        buildConfigField "Boolean", "BUG_REPORT_MINIMAL_MODE", bortProperty("BUG_REPORT_MINIMAL_MODE")

        // Metrics Settings
        buildConfigField "int", "METRICS_HEARTBEAT_INTERVAL_MINUTES", bortProperty("METRICS_HEARTBEAT_INTERVAL_MINUTES")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreFilePath)
            storePassword keystoreProperties['storePassword']
            v1SigningEnabled bortProperty("V1_SIGNING_ENABLED") as Boolean
            v2SigningEnabled bortProperty("V2_SIGNING_ENABLED") as Boolean
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        // Used for CI. Do not use for production.
        releaseTest {
            initWith release
        }
    }

    lintOptions {
        abortOnError true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
        freeCompilerArgs += "-Xopt-in=kotlin.time.ExperimentalTime"
    }

    sourceSets {
        main {
            aidl.srcDirs = ['../../MemfaultDumpster/binder']
        }
    }

    testOptions {
        // Needed to unit test against AIDL-generated code
        unitTests.returnDefaultValues = true
        unitTests.all {
            useJUnitPlatform()
        }
    }
}

dependencies {
    implementation project(':bort-shared')

    implementation deps.kotlin.stdlib
    implementation deps.kotlin.coroutines

    implementation deps.android.work
    implementation deps.android.preference

    implementation deps.serialization.json
    implementation deps.serialization.converter

    implementation deps.result
    implementation deps.retrofit
    implementation deps.okhttp
    implementation deps.okio

    debugImplementation deps.debug.leakCanary

    testImplementation deps.test.junitApi
    testImplementation deps.test.junitEngine
    testImplementation deps.test.coroutines
    testImplementation deps.test.mockk
    testImplementation deps.test.mockito
    testImplementation deps.test.mockitoKotlin
    testImplementation deps.test.mockWebServer
}

task copyReleaseApk(type: Copy) {
    from file("$buildDir/outputs/apk/release/bort-release.apk")
    into rootDir
    rename 'bort-release.apk', 'MemfaultBort.apk'
}

import java.nio.file.Paths

task exportPem(type: Exec) {
    commandLine 'keytool',
            '-export',
            '-rfc',
            '-keystore', keystoreFilePath,
            '-alias', keystoreProperties['keyAlias'],
            '-file', Paths.get(rootDir.toString(), "MemfaultBort.x509.pem"),
            '-storepass', keystoreProperties['storePassword']
}


afterEvaluate {
    assembleRelease.finalizedBy copyReleaseApk, exportPem
}
