apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'
apply from: rootProject.file("properties.gradle")
apply plugin: 'common-android'

def keystoreProperties = loadBortOtaKeystoreProperties()
def keystoreFilePath = getKeystoreFilePath()

android {
    defaultConfig {
        applicationId bortProperty("BORT_OTA_APPLICATION_ID")
        versionCode loadVersionCode() as Integer
        versionName loadVersionName() as String

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreFilePath)
            storePassword keystoreProperties['storePassword']
            v1SigningEnabled bortProperty("V1_SIGNING_ENABLED") as Boolean
            v2SigningEnabled bortProperty("V2_SIGNING_ENABLED") as Boolean
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation project(':bort-ota-lib')
    implementation project(':bort-shared')

    implementation deps.kotlin.stdlib
    implementation deps.kotlin.coroutines
    implementation deps.kotlin.coroutines.android

    implementation deps.android.activity
    implementation deps.android.appcompat
    implementation deps.android.fragment
    implementation deps.android.material
    implementation deps.android.preference

    implementation deps.result
    implementation deps.retrofit
    implementation deps.okhttp
    implementation deps.okio

    testImplementation deps.test.junit.api
    testRuntimeOnly deps.test.junit.jupiter.engine
    testRuntimeOnly deps.test.junit.vintage.engine
    testImplementation deps.test.coroutines
    testImplementation deps.test.mockk
    testImplementation deps.test.mockWebServer
    testImplementation deps.test.robolectric
}

import java.nio.file.Paths

tasks.register("exportPem", Exec) {
    commandLine 'keytool',
            '-export',
            '-rfc',
            '-keystore', keystoreFilePath,
            '-alias', keystoreProperties['keyAlias'],
            '-file', Paths.get(rootDir.toString(), "MemfaultBortOta.x509.pem"),
            '-storepass', keystoreProperties['storePassword']
}

afterEvaluate {
    tasks.named("assembleRelease").configure {
        finalizedBy tasks.named("exportPem")
        doLast {
            copy {
                from file("$buildDir/outputs/apk/release/bort-ota-release.apk")
                into rootDir
                rename 'bort-ota-release.apk', 'MemfaultBortOta.apk'
            }
        }
    }
    tasks.named("assembleDebug").configure {
        finalizedBy tasks.named("exportPem")
    }
}
