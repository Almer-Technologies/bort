apply plugin: 'com.android.application'
apply plugin: 'com.squareup.anvil'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply from: rootProject.file("properties.gradle")
apply plugin: 'common-android'

def keystoreProperties = loadBortOtaKeystoreProperties()
def keystoreFilePath = getKeystoreFilePath()

android {
    namespace 'com.memfault.bort.ota'

    defaultConfig {
        applicationId bortProperty("BORT_OTA_APPLICATION_ID")
        versionCode loadVersionCode() as Integer
        versionName loadVersionName() as String

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreFilePath)
            storePassword keystoreProperties['storePassword']
            v1SigningEnabled bortProperty("V1_SIGNING_ENABLED") as Boolean
            v2SigningEnabled bortProperty("V2_SIGNING_ENABLED") as Boolean
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    api project(':bort-ota-lib')
    api project(':bort-shared')

    implementation deps.android.activity
    implementation deps.android.appcompat
    implementation deps.android.fragment
    implementation deps.android.material
    implementation deps.android.preference
    implementation deps.android.hilt.work
    implementation deps.android.work
    implementation deps.dagger.hilt

    implementation deps.result
    implementation deps.retrofit
    implementation deps.okhttp
    implementation deps.okio

    kapt deps.android.hilt.compiler
    kapt deps.dagger.hilt.compiler

    testImplementation deps.test.mockWebServer
    testImplementation deps.test.robolectric
}

kapt {
    correctErrorTypes true
    arguments {
        // This is necessary because of the way we bind Anvil's component to Hilt's.
        arg("dagger.hilt.disableModulesHaveInstallInCheck", "true")
    }
}

import java.nio.file.Paths

tasks.register("exportPem", Exec) {
    commandLine 'keytool',
            '-export',
            '-rfc',
            '-keystore', keystoreFilePath,
            '-alias', keystoreProperties['keyAlias'],
            '-file', Paths.get(rootDir.toString(), "MemfaultBortOta.x509.pem"),
            '-storepass', keystoreProperties['storePassword']
}

afterEvaluate {
    tasks.named("assembleRelease").configure {
        finalizedBy tasks.named("exportPem")
        doLast {
            copy {
                from file("$buildDir/outputs/apk/release/bort-ota-release.apk")
                into rootDir
                rename 'bort-ota-release.apk', 'MemfaultBortOta.apk'
            }
        }
    }
    tasks.named("assembleDebug").configure {
        finalizedBy tasks.named("exportPem")
    }
}
