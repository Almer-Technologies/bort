apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply from: "../properties.gradle"

def keystorePropertiesFile = rootProject.file(bortProperty("BORT_KEYSTORE_PROPERTIES_PATH"))
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId "vnd.myandroid.bortappid"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        versionCode bortProperty("APP_VERSION_CODE") as Integer
        versionName bortProperty("APP_VERSION_NAME") as String

        // Set the project API key in bort.properties
        buildConfigField "String", "MEMFAULT_PROJECT_API_KEY", "\"" + bortProperty("MEMFAULT_PROJECT_API_KEY") + "\""
        buildConfigField "String", "MEMFAULT_FILES_BASE_URL", "\"$MEMFAULT_FILES_BASE_URL\""
        buildConfigField "String", "BLACKLISTED_BUILD_VARIANT", "\"$BLACKLISTED_BUILD_VARIANT\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        // Used for CI. Do not use for production.
        releaseTest {
            initWith release
        }
    }

    lintOptions {
        abortOnError true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation deps.kotlin.stdlib
    implementation deps.android.appCompat
    implementation deps.android.coreKtx
    implementation deps.android.constraintLayout
    implementation deps.android.lifecycle.liveData
    implementation deps.android.lifecycle.runtime
    implementation deps.android.lifecycle.common
    implementation deps.android.work

    implementation deps.serialization.runtime
    implementation deps.serialization.converter

    implementation deps.retrofit
    implementation deps.okio

    debugImplementation deps.debug.leakCanary

    testImplementation deps.test.junit
    testImplementation deps.test.coroutines
    testImplementation deps.test.mockWebServer
}

task copyReleaseApk(type: Copy) {
    from file("$buildDir/outputs/apk/release/app-release.apk")
    into rootDir
    rename 'app-release.apk', 'MemfaultBort.apk'
}

import java.nio.file.Paths

task exportPem(type: Exec) {
    commandLine 'keytool',
            '-export',
            '-rfc',
            '-keystore', keystoreProperties['storeFile'],
            '-alias', keystoreProperties['keyAlias'],
            '-file', Paths.get(rootDir.toString(), "MemfaultBort.x509.pem"),
            '-storepass', keystoreProperties['storePassword']
}


afterEvaluate {
    assembleRelease.finalizedBy copyReleaseApk, exportPem
}
